{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which transforms iterated values from two or more iterators by applying the iterated values as arguments to a provided function.\n*\n* @param {Iterator} iter0 - first input iterator\n* @param {...Iterator} iterator - subsequent iterators\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - execution context\n* @throws {Error} must provide two or more iterators\n* @throws {TypeError} must provide iterator protocol-compliant objects\n* @throws {TypeError} callback argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array-to-iterator' );\n*\n* function transform( x, y ) {\n*     return x + y;\n* }\n*\n* var it1 = array2iterator( [ 1.0, 2.0 ] );\n* var it2 = array2iterator( [ 3.0, 4.0 ] );\n*\n* var iter = iterMapN( it1, it2, transform );\n*\n* var v = iter.next().value;\n* // returns 4.0\n*\n* v = iter.next().value;\n* // returns 6.0\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterMapN() {\n\tvar iterators;\n\tvar thisArg;\n\tvar niter;\n\tvar clbk;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar i;\n\n\tniter = arguments.length;\n\tif ( !isFunction( arguments[ niter-1 ] ) ) {\n\t\tniter -= 1;\n\t\tthisArg = arguments[ niter ];\n\t}\n\tniter -= 1;\n\tclbk = arguments[ niter ];\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t}\n\tif ( niter < 2 ) {\n\t\tthrow new Error( 'insufficient arguments. Must provide two or more iterators.' );\n\t}\n\titerators = [];\n\tfor ( i = 0; i < niter; i++ ) {\n\t\tif ( !isIteratorLike( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator protocol-compliant object. Argument: `%u`. Value: `%s`.', i, arguments[ i ] ) );\n\t\t}\n\t\titerators.push( arguments[ i ] );\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( !isFunction( iterators[ i ][ iteratorSymbol ] ) ) {\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( !FLG ) {\n\t\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t\t}\n\t}\n\tFLG = false;\n\tidx = -1;\n\ti = 0;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar args;\n\t\tvar v;\n\t\tvar i;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\targs = [];\n\t\tidx += 1;\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tv = iterators[ i ].next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG = true;\n\t\t\t\treturn v;\n\t\t\t}\n\t\t\targs.push( v.value );\n\t\t}\n\t\targs.push( idx );\n\t\treturn {\n\t\t\t'value': clbk.apply( thisArg, args ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\targs.push( iterators[ i ][ iteratorSymbol ]() );\n\t\t}\n\t\targs.push( clbk );\n\t\targs.push( thisArg );\n\t\treturn iterMapN.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterMapN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which transforms iterated values from two or more iterators by applying the iterated values as arguments to a provided function.\n*\n* @module @stdlib/iter-mapn\n*\n* @example\n* var array2iterator = require( '@stdlib/array-to-iterator' );\n* var iterMapN = require( '@stdlib/iter-mapn' );\n*\n* function transform( x, y ) {\n*     return x + y;\n* }\n*\n* var it1 = array2iterator( [ 1.0, 2.0 ] );\n* var it2 = array2iterator( [ 3.0, 4.0 ] );\n*\n* var iter = iterMapN( it1, it2, transform );\n*\n* var v = iter.next().value;\n* // returns 4.0\n*\n* v = iter.next().value;\n* // returns 6.0\n*\n* var bool = iter.next().done;\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAa,QAAS,4BAA6B,EACnDC,EAAiB,QAAS,iCAAkC,EAC5DC,EAAiB,QAAS,yBAA0B,EACpDC,EAAS,QAAS,uBAAwB,EAsC9C,SAASC,GAAW,CACnB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EASJ,GAPAL,EAAQ,UAAU,OACZP,EAAY,UAAWO,EAAM,CAAE,CAAE,IACtCA,GAAS,EACTD,EAAU,UAAWC,CAAM,GAE5BA,GAAS,EACTC,EAAO,UAAWD,CAAM,EACnB,CAACP,EAAYQ,CAAK,EACtB,MAAM,IAAI,UAAWL,EAAQ,uEAAwEK,CAAK,CAAE,EAE7G,GAAKD,EAAQ,EACZ,MAAM,IAAI,MAAO,6DAA8D,EAGhF,IADAF,EAAY,CAAC,EACPO,EAAI,EAAGA,EAAIL,EAAOK,IAAM,CAC7B,GAAK,CAACX,EAAgB,UAAWW,CAAE,CAAE,EACpC,MAAM,IAAI,UAAWT,EAAQ,qGAAsGS,EAAG,UAAWA,CAAE,CAAE,CAAE,EAExJP,EAAU,KAAM,UAAWO,CAAE,CAAE,CAChC,CAOA,GALAH,EAAO,CAAC,EACRV,EAAaU,EAAM,OAAQI,CAAK,EAChCd,EAAaU,EAAM,SAAUK,CAAI,EAG5BZ,EAAiB,CACrB,IAAMU,EAAI,EAAGA,EAAIL,EAAOK,IACvB,GAAK,CAACZ,EAAYK,EAAWO,CAAE,EAAGV,CAAe,CAAE,EAAI,CACtDQ,EAAM,GACN,KACD,CAEKA,GACLX,EAAaU,EAAMP,EAAgBa,CAAQ,CAE7C,CACA,OAAAL,EAAM,GACNC,EAAM,GACNC,EAAI,EACGH,EAQP,SAASI,GAAO,CACf,IAAIG,EACAC,EACAL,EACJ,GAAKF,EACJ,MAAO,CACN,KAAQ,EACT,EAID,IAFAM,EAAO,CAAC,EACRL,GAAO,EACDC,EAAI,EAAGA,EAAIL,EAAOK,IAAM,CAE7B,GADAK,EAAIZ,EAAWO,CAAE,EAAE,KAAK,EACnBK,EAAE,KACN,OAAAP,EAAM,GACCO,EAERD,EAAK,KAAMC,EAAE,KAAM,CACpB,CACA,OAAAD,EAAK,KAAML,CAAI,EACR,CACN,MAASH,EAAK,MAAOF,EAASU,CAAK,EACnC,KAAQ,EACT,CACD,CASA,SAASF,EAAKI,EAAQ,CAErB,OADAR,EAAM,GACD,UAAU,OACP,CACN,MAASQ,EACT,KAAQ,EACT,EAEM,CACN,KAAQ,EACT,CACD,CAQA,SAASH,GAAU,CAClB,IAAIC,EACAJ,EAGJ,IADAI,EAAO,CAAC,EACFJ,EAAI,EAAGA,EAAIL,EAAOK,IACvBI,EAAK,KAAMX,EAAWO,CAAE,EAAGV,CAAe,EAAE,CAAE,EAE/C,OAAAc,EAAK,KAAMR,CAAK,EAChBQ,EAAK,KAAMV,CAAQ,EACZF,EAAS,MAAO,KAAMY,CAAK,CACnC,CACD,CAKAlB,EAAO,QAAUM,IC7IjB,IAAIe,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isFunction", "isIteratorLike", "iteratorSymbol", "format", "iterMapN", "iterators", "thisArg", "niter", "clbk", "iter", "FLG", "idx", "i", "next", "end", "factory", "args", "v", "value", "main"]
}
